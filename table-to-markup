#!/usr/bin/env python3
#
# Take a table formatted as plain text and convert it to Wiki or Markdown
# format.
#
# The input columns can be separated by tabs or spaces:
#
#  * If the input has no tab characters, then we infer the table column
#    boundaries: any character column that is a space in every row is assumed
#    to be a table column boundary
#
#  * If there are tabs, we assume all columns are separated by one tab.  This
#    is the case if you paste from Excel, for example
#
# In Wiki format, columns are separated by "||", and rows begin and
# end with "||".  Spacing in each cell determines alignment:
#
# * A cell with at least two spaces at both the beginning and end will be
#   centered by the Wiki table renderer
#
# * A cell that is touching exactly one || border will be aligned to that
#   border (left or right aligned)
#
# * Otherwise, the cell gets centered for the header row and left aligned for
#   other rows
#
# Example Wiki table:
#
#  ||=Tables     =||=      Are      =||= Cool=||
#  ||col 3 is     ||  right-aligned  ||  $1600||
#  ||col 2 is     ||    centered     ||    $12||
#  ||zebra stripes||    are neat     ||     $1||
#
# In Markdown format, columns are separated by "|", and rows begin and end
# with "|".  The second line determines how text in each column will be
# aligned; colons indicate alignment:
#
# * center :---:
#
# * right ---:
#
# * left ---
#
# Example Markdown table:
#
#  | Tables        | Are           | Cool  |
#  | ------------- |:-------------:| -----:|
#  | col 3 is      | right-aligned | $1600 |
#  | col 2 is      | centered      |   $12 |
#  | zebra stripes | are neat      |    $1 |
#
# Options:
#
#   --header-row (-h)    The first row is the table header
#
#   --header TEXT        Use TEXT as the table header (as if it were the first
#                        row in the input)
#
#   --align (-a) SPEC
#
#   SPEC is a string of "clrd" characters, one per table column.
#
#   * c - center
#   * l - left align
#   * r - right align
#   * d - default align: numbers are right aligned, all else left
#
#   If the SPEC string is too short (there are more table columns than chars)
#   then the last char is used repeatedly.
#
#   --wiki (-w)          Output Wiki format (default)
#   --markdown (-m)      Output Markdown format
#   --tab (-t)           Output tab-separated columns
#
#

# This software is distributed under the "Simplified BSD license":
#
# Copyright Michael Cook <michael@waxrat.com>. All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
#    1. Redistributions of source code must retain the above copyright notice,
#       this list of conditions and the following disclaimer.
#
#    2. Redistributions in binary form must reproduce the above copyright
#       notice, this list of conditions and the following disclaimer in the
#       documentation and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
# FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
# CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
# OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

import sys
import re
from typing import Final
from collections.abc import Iterable
import click

# For default alignment 'd', any field that looks like a number
# will be right justified
NUMBER_RE: Final = re.compile(r'^[-+]?(\d+\.?\d*|\.\d+)([eE][+-]?\d+)?%?$')

def has_tabs(lines: Iterable[str]) -> bool:
    """True if any line contains a tab"""

    return any('\t' in line for line in lines)

def all_spaces(lines: Iterable[str], col: int) -> bool:
    """True if every character in column COL is a space"""

    return all(line[col] == ' ' for line in lines)

def trim(values: Iterable[str]) -> list[str]:
    """
    Remove leading and trailing whitespace for each string in VALUES.
    Compress consecutive whitespace to a single space
    """
    return [re.sub(r'\s+', ' ', value).strip()
            for value in values]

class TableToMarkup:

    def __init__(self,
                 header_row: bool,
                 header: str,
                 no_header_line: bool,
                 align: str,
                 wiki: bool,
                 markdown: bool,
                 tab: bool) -> None:

        self.header_row = header_row
        self.header = header
        self.no_header_line = no_header_line
        self.align = align.lower()
        self.wiki = wiki
        self.markdown = markdown
        self.tab = tab

        if not re.match(r'^[clrd]+$', self.align):
            raise RuntimeError(f'Invalid align "{self.align}"')

        if wiki + markdown + tab == 0:
            self.markdown = True

    def get_align(self, col: int, text: str) -> str:
        """Return the alignment character for TEXT in column COL"""

        a = self.align[col] if col < len(self.align) else self.align[-1]
        if a == 'd':
            a = 'l'
            if NUMBER_RE.match(text):
                a = 'r'
        return a

    def process_lines(self, lines: Iterable[str]) -> None:
        if not lines:
            return

        if self.header is not None:
            self.header_row = True
            lines = list(lines)
            lines.insert(0, self.header)

        # Remove trailing newlines, spaces, tabs and carriage returns
        lines = [line.rstrip() for line in lines]

        if has_tabs(lines):
            rows = [trim(line.split('\t'))
                    for line in lines]
        else:
            longest = max(len(line) for line in lines)

            # Make all lines the same length
            lines = [line + ' ' * (longest - len(line))
                     for line in lines]

            # Remove leading spaces if in all rows
            while longest > 0 and all_spaces(lines, 0):
                lines = [line[1:] for line in lines]
                longest -= 1

            # Find the columns
            cols = []
            i = 0
            while i < longest:
                if all_spaces(lines, i):
                    cols.append(i)
                    # Skip adjacent character columns that are all blank
                    while i + 1 < longest and all_spaces(lines, i + 1):
                        i += 1
                i += 1
            cols.append(longest)

            # Extract all the cells
            rows = []
            for line in lines:
                cells = []
                prev_col = 0
                for col in cols:
                    cells.append(line[prev_col:col])
                    prev_col = col + 1
                rows.append(trim(cells))

        # Calculate how many columns we have: the maximum number of columns
        # over all rows
        num_cols = max(len(row) for row in rows)

        if self.wiki:
            self.output_wiki(num_cols, rows)

        if self.markdown:
            self.output_markdown(num_cols, rows)

        if self.tab:
            self.output_tab(num_cols, rows)

    def output_wiki(self, num_cols: int, rows: Iterable[Iterable[str]]) -> None:
        # Calculate the width of each column: the widest of all cells in that
        # column.  Alignment can affect the width of each column
        width = [0] * num_cols
        header_row = self.header_row
        for row in rows:
            i = 0
            for cell in row:
                wid = len(cell)
                if header_row:
                    wid += 2       # length('==')

                a = self.get_align(i, cell)
                if a == 'c':
                    wid += 4       # two spaces on each end
                elif a == 'r':
                    wid += 1       # a space on the left

                if width[i] < wid:
                    width[i] = wid
                i += 1
            header_row = False

        header_row = self.header_row
        for row in rows:
            i = 0
            line = ''
            for cell in row:
                wid = width[i]
                line += '||'
                if header_row:
                    line += '='
                    wid -= 2

                sp = wid - len(cell)
                a = self.get_align(i, cell)
                if a == 'c':
                    x = sp // 2
                    y = sp - x
                    line += ' ' * x + cell + ' ' * y
                elif a == 'r':
                    line += ' ' * sp + cell
                else:
                    assert a == 'l'
                    line += cell + ' ' * sp

                if header_row:
                    line += '='

                i += 1
            line += '||'
            print(line)
            header_row = False

    def output_markdown(self, num_cols: int, rows: Iterable[Iterable[str]]) -> None:
        if not self.header_row:
            # Fake header
            rows = list(rows)
            rows.insert(0, [f'C{i + 1}' for i in range(num_cols)])

        # Calculate the width of each column: the widest of all cells
        # in that column
        width = [0] * num_cols
        for row in rows:
            i = 0
            for cell in row:
                wid = len(cell)
                if width[i] < wid:
                    width[i] = wid
                i += 1

        header_row = True
        for row in rows:
            i = 0
            line = ''
            for cell in row:
                line += '| '
                wid = width[i]

                sp = wid - len(cell)
                a = self.get_align(i, cell)
                if a == 'c':
                    x = sp // 2
                    y = sp - x
                    line += ' ' * x + cell + ' ' * y
                elif a == 'r':
                    line += ' ' * sp + cell
                else:
                    assert a == 'l'
                    line += cell + ' ' * sp
                line += ' '
                i += 1
            line += '|'
            print(line)

            if header_row and not self.no_header_line:
                header_row = False
                line = ''
                for i in range(num_cols):
                    wid = width[i]
                    a = self.get_align(i, '')
                    if a == 'c':
                        line += '|:' + '-' * wid + ':'
                    elif a == 'r':
                        line += '| ' + '-' * wid + ':'
                    else:
                        assert a == 'l'
                        line += '| ' + '-' * wid + ' '
                line += '|'
                print(line)

    @staticmethod
    def output_tab(_num_cols: int, rows: Iterable[Iterable[str]]) -> None:
        for row in rows:
            print('\t'.join(row))

@click.command()
@click.option('--header-row', '-H', is_flag=True,
              help='First input row is the header')
@click.option('--header',
              help='Use this text as the header')
@click.option('--no-header-line', '-N', is_flag=True,
              help="""
Suppress the line of dashes after the output header line (markdown)
""")
@click.option('--align', '-a', default='d', show_default=True,
              help="""
A string of 'clrd' characters, one per table column
center, left, right and default align.
For default align, numbers are right aligned, all else left.

If there are more table columns than align chars,
then the last char is used repeatedly
""")
@click.option('--wiki', '-w', is_flag=True,
              help='Generate a Wiki document')
@click.option('--markdown', '-m', is_flag=True,
              help='Generate a Markdown document')
@click.option('--tab', '-t', is_flag=True,
              help='Generate a tab-separated columns document')
@click.argument('files', nargs=-1)
def main(header_row: bool,
         header: str,
         no_header_line: bool,
         align: str,
         wiki: bool,
         markdown: bool,
         tab: bool,
         files: Iterable[str]) -> None:
    """
    Take a table formatted as plain text and convert it to Wiki or Markdown format
    """

    table_to_markup = TableToMarkup(header_row,
                                    header,
                                    no_header_line,
                                    align,
                                    wiki,
                                    markdown,
                                    tab)

    if files:
        want_separator = False
        for filename in files:
            with open(filename, encoding='utf-8') as fh:
                if want_separator:
                    print('\f')
                table_to_markup.process_lines(fh.readlines())
                want_separator = True
    else:
        table_to_markup.process_lines(sys.stdin.readlines())

main()                          # pylint: disable=no-value-for-parameter
