#!/usr/bin/env python3
#
# Take a table formatted as plain text and convert it to Wiki or Markdown
# format.
#
# The input columns can be separated by tabs or spaces:
#
#  * If the input has no tab characters, then we infer the table column
#    boundaries: any character column that is a space in every row is assumed
#    to be a table column boundary
#
#  * If there are tabs, we assume all columns are separated by one tab.  This
#    is the case if you paste from Excel, for example
#
# In Wiki format, columns are separated by "||", and rows begin and
# end with "||".  Spacing in each cell determines alignment:
#
# * A cell with at least two spaces at both the beginning and end will be
#   centered by the Wiki table renderer
#
# * A cell that is touching exactly one || border will be aligned to that
#   border (left or right aligned)
#
# * Otherwise, the cell gets centered for the header row and left aligned for
#   other rows
#
# Example Wiki table:
#
#  ||=Tables     =||=      Are      =||= Cool=||
#  ||col 3 is     ||  right-aligned  ||  $1600||
#  ||col 2 is     ||    centered     ||    $12||
#  ||zebra stripes||    are neat     ||     $1||
#
# In Markdown format, columns are separated by "|", and rows begin and end
# with "|".  The second line determines how text in each column will be
# aligned; colons indicate alignment:
#
# * center :---:
#
# * right ---:
#
# * left ---
#
# Example Markdown table:
#
#  | Tables        | Are           | Cool  |
#  | ------------- |:-------------:| -----:|
#  | col 3 is      | right-aligned | $1600 |
#  | col 2 is      | centered      |   $12 |
#  | zebra stripes | are neat      |    $1 |
#
# Options:
#
#   --header-row (-h)    The first row is the table header
#
#   --header TEXT        Use TEXT as the table header (as if it were the first
#                        row in the input)
#
#   --align (-a) SPEC
#
#   SPEC is a string of "clrd" characters, one per table column.
#
#   * c - center
#   * l - left align
#   * r - right align
#   * d - default align: numbers are right aligned, all else left
#
#   If the SPEC string is too short (there are more table columns than chars)
#   then the last char is used repeatedly.
#
#   --wiki (-w)          Output Wiki format (default)
#   --markdown (-m)      Output Markdown format
#   --tab (-t)           Output tab-separated columns
#
#

# This software is distributed under the "Simplified BSD license":
#
# Copyright Michael Cook <michael@waxrat.com>. All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
#    1. Redistributions of source code must retain the above copyright notice,
#       this list of conditions and the following disclaimer.
#
#    2. Redistributions in binary form must reproduce the above copyright
#       notice, this list of conditions and the following disclaimer in the
#       documentation and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
# FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
# CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
# OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

import sys
import argparse
import re
from typing import Iterable, List

# ----------------------------------------------------------------------------

parser = argparse.ArgumentParser(description="""
Take a table formatted as plain text and convert it to
Wiki or Markdown format
""")
parser.add_argument('--header-row', '-H',
                    action='store_true',
                    help='First input row is the header')
parser.add_argument('--header',
                    help='Use this text as the header')
parser.add_argument('--no-header-line', '-N',
                    action='store_true',
                    help="""
Suppress the line of dashes after the output header line (markdown)
""")
parser.add_argument('--align', '-a',
                    default='d',
                    help="""
A string of 'clrd' characters, one per table column
center, left, right and default align.
For default align, numbers are right aligned, all else left.

If there are more table columns than align chars,
then the last char is used repeatedly
""")
parser.add_argument('--wiki', '-w',
                    action='store_true')
parser.add_argument('--markdown', '-m',
                    action='store_true')
parser.add_argument('--tab', '-t',
                    action='store_true')
parser.add_argument('files', nargs='*')
OPTS = parser.parse_args()
del parser

if OPTS.wiki + OPTS.markdown + OPTS.tab == 0:
    OPTS.markdown = True

align = OPTS.align.lower()
if not re.match(r'^[clrd]+$', align):
    raise Exception('invalid --align argument "{}"'.format(OPTS.align))

# ----------------------------------------------------------------------------

# For default alignment 'd', any field that looks like a number
# will be right justified
number_re = re.compile(r'^[-+]?(\d+\.?\d*|\.\d+)([eE][+-]?\d+)?%?$')

def has_tabs(lines: Iterable[str]) -> bool:
    """True if any line contains a tab"""

    for line in lines:
        if '\t' in line:
            return True
    return False

def all_spaces(lines: Iterable[str], col: int) -> bool:
    """True if every character in column COL is a space"""

    for line in lines:
        if line[col] != ' ':
            return False
    return True

def get_align(col: int, text: str) -> str:
    """Return the alignment character for TEXT in column COL"""

    if col < len(align):
        a = align[col]
    else:
        a = 'd'
    if a == 'd':
        a = 'l'
        if number_re.match(text):
            a = 'r'
    return a

def trim(values: Iterable[str]) -> List[str]:
    """
    Remove leading and trailing whitespace for each string in VALUES.
    Compress consecutive whitespace to a single space
    """
    return [re.sub(r'\s+', ' ', value).strip()
            for value in values]

# ----------------------------------------------------------------------------

def output_wiki(num_cols: int, rows: Iterable[Iterable[str]]) -> None:
    # Calculate the width of each column: the widest of all cells in that
    # column.  Alignment can affect the width of each column
    width = [0] * num_cols
    header_row = OPTS.header_row
    for row in rows:
        i = 0
        for cell in row:
            wid = len(cell)
            if header_row:
                wid += 2       # length('==')

            a = get_align(i, cell)
            if a == 'c':
                wid += 4       # two spaces on each end
            elif a == 'r':
                wid += 1       # a space on the left

            if width[i] < wid:
                width[i] = wid
            i += 1
        header_row = False

    header_row = OPTS.header_row
    for row in rows:
        i = 0
        line = ''
        for cell in row:
            wid = width[i]
            line += '||'
            if header_row:
                line += '='
                wid -= 2

            sp = wid - len(cell)
            a = get_align(i, cell)
            if a == 'c':
                x = sp // 2
                y = sp - x
                line += ' ' * x + cell + ' ' * y
            elif a == 'r':
                line += ' ' * sp + cell
            else:
                assert a == 'l'
                line += cell + ' ' * sp

            if header_row:
                line += '='

            i += 1
        line += '||'
        print(line)
        header_row = False

def output_markdown(num_cols: int, rows: Iterable[Iterable[str]]) -> None:
    if not OPTS.header_row:
        # Fake header
        rows = list(rows)
        rows.insert(0, ['C%d' % (i + 1) for i in range(num_cols)])

    # Calculate the width of each column: the widest of all cells
    # in that column
    width = [0] * num_cols
    for row in rows:
        i = 0
        for cell in row:
            wid = len(cell)
            if width[i] < wid:
                width[i] = wid
            i += 1

    header_row = True
    for row in rows:
        i = 0
        line = ''
        for cell in row:
            line += '| '
            wid = width[i]

            sp = wid - len(cell)
            a = get_align(i, cell)
            if a == 'c':
                x = sp // 2
                y = sp - x
                line += ' ' * x + cell + ' ' * y
            elif a == 'r':
                line += ' ' * sp + cell
            else:
                assert a == 'l'
                line += cell + ' ' * sp
            line += ' '
            i += 1
        line += '|'
        print(line)

        if header_row and not OPTS.no_header_line:
            header_row = False
            line = ''
            for i in range(num_cols):
                wid = width[i]
                a = get_align(i, '')
                if a == 'c':
                    line += '|:' + '-' * wid + ':'
                elif a == 'r':
                    line += '| ' + '-' * wid + ':'
                else:
                    assert a == 'l'
                    line += '| ' + '-' * wid + ' '
            line += '|'
            print(line)

def output_tab(_num_cols: int, rows: Iterable[Iterable[str]]) -> None:
    for row in rows:
        print('\t'.join(row))

# ----------------------------------------------------------------------------

def process_lines(lines: Iterable[str]) -> None:
    if not lines:
        return

    if OPTS.header is not None:
        OPTS.header_row = True
        lines = list(lines)
        lines.insert(0, OPTS.header)

    # Remove trailing newlines, spaces, tabs and carriage returns
    lines = [line.rstrip() for line in lines]

    if has_tabs(lines):
        rows = [trim(line.split('\t'))
                for line in lines]
    else:
        longest = max(map(len, lines))

        # Make all lines the same length
        lines = [line + ' ' * (longest - len(line))
                 for line in lines]

        # Remove leading spaces if in all rows
        while longest > 0 and all_spaces(lines, 0):
            lines = [line[1:] for line in lines]
            longest -= 1

        # Find the columns
        cols = []
        i = 0
        while i < longest:
            if all_spaces(lines, i):
                cols.append(i)
                # Skip adjacent character columns that are all blank
                while i + 1 < longest and all_spaces(lines, i + 1):
                    i += 1
            i += 1
        cols.append(longest)

        # Extract all the cells
        rows = []
        for line in lines:
            cells = []
            prev_col = 0
            for col in cols:
                cells.append(line[prev_col:col])
                prev_col = col + 1
            rows.append(trim(cells))

    # Calculate how many columns we have: the maximum
    # number of columns over all rows
    num_cols = max([len(row) for row in rows])

    if OPTS.wiki:
        output_wiki(num_cols, rows)

    if OPTS.markdown:
        output_markdown(num_cols, rows)

    if OPTS.tab:
        output_tab(num_cols, rows)

def main() -> None:
    if OPTS.files:
        want_separator = False
        for filename in OPTS.files:
            with open(filename) as fh:
                if want_separator:
                    print('\f')
                process_lines(fh.readlines())
                want_separator = True
    else:
        process_lines(sys.stdin.readlines())

main()
