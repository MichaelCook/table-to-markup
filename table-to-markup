#!/usr/bin/perl
#
# Take a table formatted as plain text and convert it to Wiki or Markdown
# format.
#
# The input columns can be separated by tabs or spaces:
#
#  * If the input has no tab characters, then we infer the table column
#    boundaries: any character column that is a space in every row is assumed
#    to be a table column boundary.
#
#  * If there are tabs, we assume all columns are separated by one tab.  This
#    is the case if you paste from Excel, for example.
#
# In Wiki format, columns are separated by "||", and rows begin and
# end with "||".  Spacing in each cell determines alignment:
#
# * A cell with at least two spaces at both the beginning and end will be
#   centered by the Wiki table renderer.
#
# * A cell that is touching exactly one || border will be aligned to that
#   border (left or right aligned).
#
# * Otherwise, the cell gets centered for the header row and left aligned for
#   other rows.
#
# Example Wiki table:
#
#  ||=Tables     =||=      Are      =||= Cool=||
#  ||col 3 is     ||  right-aligned  ||  $1600||
#  ||col 2 is     ||    centered     ||    $12||
#  ||zebra stripes||    are neat     ||     $1||
#
# In Markdown format, columns are separated by "|", and rows begin and end
# with "|".  The second line determines how text in each column will be aligned;
# colons indicate alignment:
#
# * center :---:
#
# * right ---:
#
# * left ---
#
# Example Markdown table:
#
#  | Tables        | Are           | Cool  |
#  | ------------- |:-------------:| -----:|
#  | col 3 is      | right-aligned | $1600 |
#  | col 2 is      | centered      |   $12 |
#  | zebra stripes | are neat      |    $1 |
#
# Options:
#
#   --header-row (-h)    The first row is the table header.
#
#   --align (-a) SPEC
#
#   SPEC is a string of "clrd" characters, one per table column.
#
#   * c - center
#   * l - left align
#   * r - right align
#   * d - default align: numbers are right aligned, all else left.
#
#   If the SPEC string is too short (there are more table columns than chars)
#   then the last char is used repeatedly.
#
#   --wiki (-w)          Output Wiki format (default).
#   --markdown (-m)      Output Markdown format.
#   --tab (-t)           Output tab-separated columns.
#
#

# This software is distributed under the "Simplified BSD license":
#
# Copyright Michael Cook <michael@waxrat.com>. All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
#    1. Redistributions of source code must retain the above copyright notice,
#       this list of conditions and the following disclaimer.
#
#    2. Redistributions in binary form must reproduce the above copyright
#       notice, this list of conditions and the following disclaimer in the
#       documentation and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
# FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
# CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
# OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

use strict;
use warnings;
use Getopt::Long;

my ($THIS) = $0 =~ m%([^/]+)$%;
my $USAGE = "usage: $THIS [files...]\n";

my $HEADERROW;
my $ALIGN = "d";
my $OUTPUT = "wiki";            # wiki, markdown, tab
my $DEBUG;

Getopt::Long::config("bundling");
GetOptions
("header-row|h" => \$HEADERROW,
 # First input row is the header.

 "align|a=s" => \$ALIGN,
 # A string of "clrd" characters, one per table column.
 #
 # c - center
 # l - left align
 # r - right align
 # d - default align: numbers are right aligned, all else left.
 #
 # If the string is too short (there are more table columns than chars)
 # then the last char is used repeatedly.

 "wiki|w" => sub { $OUTPUT = "wiki" },
 "markdown|m" => sub { $OUTPUT = "markdown" },
 "tab|t" => sub { $OUTPUT = "tab" },

 "debug!" => \$DEBUG)
or die $USAGE;

# For default alignment "d", any field that looks like a number
# will be right justified.
my $NUMBER = qr/^[-+]?(\d+\.?\d*|\.\d+)(e[+-]?\d+)?%?$/i;

sub has_tabs {
    my ($aref) = @_;
    # True if any line in @$aref contains a tab.

    for (@$aref) {
        return 1
            if /\t/;
    }
    return 0;
}

sub longest {
    my ($aref) = @_;
    # Return the length of the longest line in @$aref.

    my $n = 0;
    for (@$aref) {
        $n = length
            if $n < length;
    }
    return $n;
}

sub all_spaces {
    my ($aref, $col) = @_;
    # True if every character in column $col is a space.

    for (@$aref) {
        return 0
            unless substr($_, $col, 1) eq " ";
    }
    return 1;
}

sub get_align {
    my ($col, $text) = @_;
    # Return the alignment character for $text in column $col.

    my $a = substr $ALIGN, $col, 1;
    if ($a eq "d") {
        $a = "l";
        $a = "r" if $text =~ /$NUMBER/;
    }
    return $a;
}

# ----------------------------------------------------------------------------

sub output_wiki {
    my ($num_cols, $rows) = @_;

    # Calculate the width of each column: the widest of all cells in that
    # column.  Alignment can affect the width of each column.
    my @width = (0) x $num_cols;
    my $headerrow = $HEADERROW;
    for my $row (@$rows) {
        my $i = 0;
        for (@$row) {
            my $wid = length;
            $wid += 2 # length("==")
                if $headerrow;

            my $a = get_align($i, $_);
            if ($a eq "c") {
                $wid += 4;      # two spaces on each end
            } elsif ($a eq "r") {
                $wid++;         # a space on the left
            }

            $width[$i] = $wid
                if $width[$i] < $wid;
            ++$i;
        }
        $headerrow = 0;
    }

    $headerrow = $HEADERROW;
    for my $row (@$rows) {
        my $i = 0;
        for (@$row) {
            my $wid = $width[$i];
            print "||";
            if ($headerrow) {
                print "=";
                $wid -= 2;
            }

            my $sp = $wid - length;
            my $a = get_align($i, $_);
            if ($a eq "c") {
                my $x = int($sp / 2);
                my $y = $sp - $x;
                print " " x $x, $_, " " x $y;
            } elsif ($a eq "r") {
                print " " x $sp, $_;
            } else {
                $a eq "l" or die;
                print $_, " " x $sp;
            }

            print "="
                if $headerrow;
            ++$i;
        }
        print "||\n";
        $headerrow = 0;
    }
}

sub output_markdown {
    my ($num_cols, $rows) = @_;

    unless ($HEADERROW) {
        # Fake header.
        my @header;
        for (my $i = 0; $i < $num_cols; ++$i) {
            push @header, sprintf "C%d", $i + 1;
        }
        unshift @$rows, \@header;
    }

    # Calculate the width of each column: the widest of all cells
    # in that column.
    my @width = (0) x $num_cols;
    for my $row (@$rows) {
        my $i = 0;
        for (@$row) {
            my $wid = length;
            $width[$i] = $wid
                if $width[$i] < $wid;
            ++$i;
        }
    }

    my $headerrow = 1;
    for my $row (@$rows) {
        my $i = 0;
        for (@$row) {
            print "| ";
            my $wid = $width[$i];

            my $sp = $wid - length;
            my $a = get_align($i, $_);
            if ($a eq "c") {
                my $x = int($sp / 2);
                my $y = $sp - $x;
                print " " x $x, $_, " " x $y;
            } elsif ($a eq "r") {
                print " " x $sp, $_;
            } else {
                $a eq "l" or die;
                print $_, " " x $sp;
            }
            print " ";
            ++$i;
        }
        print "|\n";

        if ($headerrow) {
            $headerrow = 0;
            for (my $i = 0; $i < $num_cols; ++$i) {
                my $wid = $width[$i];
                my $a = get_align($i, $_);
                if ($a eq "c") {
                    print "|:", "-" x $wid, ":";
                } elsif ($a eq "r") {
                    print "| ", "-" x $wid, ":";
                } else {
                    $a eq "l" or die;
                    print "| ", "-" x $wid, " ";
                }
            }
            print "|\n"
        }
    }
}

sub output_tab {
    my ($num_cols, $rows) = @_;

    for my $row (@$rows) {
        print join("\t", @$row), "\n";
    }
}

$OUTPUT = eval "\\&output_$OUTPUT" // die;

# ----------------------------------------------------------------------------

$ALIGN =~ /^[clrd]+$/i
    or die "invalid --align argument '$ALIGN'";
$ALIGN = lc $ALIGN;

push @ARGV, "-"
    unless @ARGV;

my $exit = 0;
my $table_separator = "";
for my $arg (@ARGV) {
    warn "> arg $arg\n" if $DEBUG;
    my $fh;
    unless (open $fh, $arg) {
        warn "open $arg: $!";
        $exit = 1;
        next;
    }
    my @rows = <$fh>;
    $fh = undef;

    # Remove trailing newlines, spaces, tabs and carriage returns.
    s/\s+$//
        for @rows;

    if (has_tabs \@rows) {
        warn "> has tabs\n" if $DEBUG;
        for (@rows) {
            $_ = [split /\t/, $_, -1];
        }
    } else {
        warn "> no tabs\n" if $DEBUG;
        my $longest = longest \@rows;
        # Make all lines the same length.
        for (@rows) {
            $_ .= " " x ($longest - length);
        }
        # Remove leading spaces if in all rows.
        while ($longest > 0 && all_spaces \@rows, 0) {
            for (@rows) {
                substr($_, 0, 1, "");
            }
            --$longest;
        }
        # Remove trailing spaces if in all rows.
        while ($longest > 0 && all_spaces \@rows, $longest - 1) {
            for (@rows) {
                substr($_, -1, 1, "");
            }
            --$longest;
        }
        # Find the columns.
        my @cols;
        for (my $i = 0; $i < $longest; ++$i) {
            if (all_spaces \@rows, $i) {
                push @cols, $i;
                # Skip adjacent character columns that are all blank.
                while ($i + 1 < $longest && all_spaces \@rows, $i + 1) {
                    ++$i;
                }
            }
        }
        push @cols, $longest;
        # Extract all the cells.
        for (@rows) {
            my @c;
            my $prev = 0;
            for my $col (@cols) {
                push @c, substr($_, $prev, $col - $prev);
                $prev = $col + 1;
            }
            $_ = \@c;
        }
    }

    # Trim excess whitespace from each cell.
    for my $row (@rows) {
        for (@$row) {
            s/  +/ /g;
            s/^ //;
            s/ $//;
        }
    }

    # Calculate how many columns we have: the maximum number of columns over
    # all rows.
    my $num_cols = 0;
    for my $row (@rows) {
        $num_cols = @$row
            if $num_cols < @$row;
    }

    # If our alignment string is too short, replicate the last char.
    $ALIGN .= substr($ALIGN, -1) x ($num_cols - length($ALIGN));
    warn "> num_cols=$num_cols, align='$ALIGN'\n" if $DEBUG;

    # Output the results.
    print $table_separator;
    $table_separator = "\f\n";
    $OUTPUT->($num_cols, \@rows);
}
exit $exit;
